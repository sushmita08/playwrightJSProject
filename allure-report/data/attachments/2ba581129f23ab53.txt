# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Home Page >> should navigate to patient management
- Location: /Users/zineone/Assesment/tests/home-page.spec.js:29:3

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)

Locator: locator('h1')
Expected string: "Patient Management"
Received: <element(s) not found>
Call log:
  - expect.toContainText with timeout 5000ms
  - waiting for locator('h1')

    at /Users/zineone/Assesment/tests/home-page.spec.js:35:38
```

# Page snapshot

```yaml
- banner:
  - button "account of current user": T
- navigation "mailbox folders":
  - separator
  - list:
    - link "dashboard Dashboard":
      - button "dashboard Dashboard":
        - img "dashboard"
        - text: Dashboard
    - link "dashboard Tests":
      - button "dashboard Tests":
        - img "dashboard"
        - text: Tests
    - link "dashboard Inventory":
      - button "dashboard Inventory":
        - img "dashboard"
        - text: Inventory
    - link "dashboard Patients":
      - button "dashboard Patients":
        - img "dashboard"
        - text: Patients
    - link "dashboard Labs":
      - button "dashboard Labs":
        - img "dashboard"
        - text: Labs
    - link "dashboard Doctors":
      - button "dashboard Doctors":
        - img "dashboard"
        - text: Doctors
    - link "dashboard Accounting":
      - button "dashboard Accounting":
        - img "dashboard"
        - text: Accounting
- main:
  - text: Patients
  - link "Add Patient add":
    - button "Add Patient add":
      - text: Add Patient
      - img "add"
  - navigation "breadcrumb":
    - list:
      - listitem:
        - link "dashboard":
          - paragraph: dashboard
      - listitem:
        - paragraph: Patients
  - heading "List of Patients" [level=6]
  - textbox "Search"
  - button [disabled]
  - button "Export"
  - table:
    - rowgroup:
      - row "Sr Name Gender Age Contact No Date":
        - columnheader "Sr":
          - button "Sr"
        - columnheader "Name":
          - button "Name"
        - columnheader "Gender":
          - button "Gender"
        - columnheader "Age":
          - button "Age"
        - columnheader "Contact No":
          - button "Contact No"
        - columnheader "Date":
          - button "Date"
    - rowgroup:
      - row "filter data by Sr filter data by Name filter data by Gender filter data by Age filter data by Contact No filter data by Date":
        - cell "filter data by Sr":
          - searchbox "filter data by Sr"
        - cell "filter data by Name":
          - searchbox "filter data by Name"
        - cell "filter data by Gender":
          - searchbox "filter data by Gender"
        - cell "filter data by Age":
          - searchbox "filter data by Age"
        - cell "filter data by Contact No":
          - searchbox "filter data by Contact No"
        - cell "filter data by Date":
          - searchbox "filter data by Date"
      - row "275 aditya male 22 7852524875 25 - 3 - 2025 14:21:58":
        - cell "275"
        - cell "aditya"
        - cell "male"
        - cell "22"
        - cell "7852524875"
        - cell "25 - 3 - 2025 14:21:58"
      - row "272 joe male 45 8546525541 25 - 3 - 2025 11:34:55":
        - cell "272"
        - cell "joe"
        - cell "male"
        - cell "45"
        - cell "8546525541"
        - cell "25 - 3 - 2025 11:34:55"
      - row "271 Amit Majumder male 26 8617777029 15 - 3 - 2025 13:57:37":
        - cell "271"
        - cell "Amit Majumder"
        - cell "male"
        - cell "26"
        - cell "8617777029"
        - cell "15 - 3 - 2025 13:57:37"
      - row "270 soma male 25 1234567897 13 - 3 - 2025 10:16:49":
        - cell "270"
        - cell "soma"
        - cell "male"
        - cell "25"
        - cell "1234567897"
        - cell "13 - 3 - 2025 10:16:49"
      - row "269 pr male 90 9075742434 8 - 3 - 2025 22:35:58":
        - cell "269"
        - cell "pr"
        - cell "male"
        - cell "90"
        - cell "9075742434"
        - cell "8 - 3 - 2025 22:35:58"
  - table:
    - rowgroup:
      - row "5 rows 1-5 of 111":
        - cell "5 rows 1-5 of 111":
          - 'button "Rows per page: 5 rows"': 5 rows
          - button [disabled]
          - button [disabled]
          - text: 1-5 of 111
          - button
          - button
  - link
- log
```

# Test source

```ts
   1 | const { test, expect } = require('@playwright/test');
   2 |
   3 | test.describe('Home Page', () => {
   4 |   test.beforeEach(async ({ page }) => {
   5 |     // Login before each test
   6 |     await page.goto('https://gor-pathology.web.app/');
   7 |     await page.fill('input[type="email"]', 'test@kennect.io');
   8 |     await page.fill('input[type="password"]', 'Qwerty@1234');
   9 |     await page.click('button[type="submit"]');
  10 |   });
  11 |
  12 |   test('should display dashboard after login', async ({ page }) => {
  13 |     // Verify dashboard is visible
  14 |     await expect(page.locator('.dashboard')).toBeVisible();
  15 |     
  16 |     // Verify navigation menu is present
  17 |     await expect(page.locator('nav')).toBeVisible();
  18 |   });
  19 |
  20 |   test('should navigate to cost calculator', async ({ page }) => {
  21 |     // Click on cost calculator link
  22 |     await page.click('text=Cost Calculator');
  23 |     
  24 |     // Verify navigation to cost calculator page
  25 |     await expect(page).toHaveURL(/.*calculator/);
  26 |     await expect(page.locator('h1')).toContainText('Cost Calculator');
  27 |   });
  28 |
  29 |   test('should navigate to patient management', async ({ page }) => {
  30 |     // Click on patient management link
  31 |     await page.click('text=Patients');
  32 |     
  33 |     // Verify navigation to patient management page
  34 |     await expect(page).toHaveURL(/.*patients/);
> 35 |     await expect(page.locator('h1')).toContainText('Patient Management');
     |                                      ^ Error: Timed out 5000ms waiting for expect(locator).toContainText(expected)
  36 |   });
  37 |
  38 |   test('should display todo list after login', async ({ page }) => {
  39 |     // Verify todo list is visible
  40 |     await expect(page.locator('.todo-list')).toBeVisible();
  41 |     
  42 |     // Verify todo items are displayed
  43 |     const todoItems = await page.locator('.todo-item').count();
  44 |     expect(todoItems).toBeGreaterThan(0);
  45 |   });
  46 |
  47 |   test('should mark todo as complete', async ({ page }) => {
  48 |     // Get initial count of incomplete todos
  49 |     const initialIncompleteCount = await page.locator('.todo-item:not(.completed)').count();
  50 |     
  51 |     // Mark first todo as complete
  52 |     await page.click('.todo-item:not(.completed) >> button:has-text("Complete")');
  53 |     
  54 |     // Verify todo is marked as complete
  55 |     const newIncompleteCount = await page.locator('.todo-item:not(.completed)').count();
  56 |     expect(newIncompleteCount).toBe(initialIncompleteCount - 1);
  57 |   });
  58 |
  59 |   test('should filter todos by status', async ({ page }) => {
  60 |     // Click on completed filter
  61 |     await page.click('text=Completed');
  62 |     
  63 |     // Verify only completed todos are shown
  64 |     const completedTodos = await page.locator('.todo-item.completed').count();
  65 |     const totalTodos = await page.locator('.todo-item').count();
  66 |     expect(completedTodos).toBe(totalTodos);
  67 |     
  68 |     // Click on active filter
  69 |     await page.click('text=Active');
  70 |     
  71 |     // Verify only active todos are shown
  72 |     const activeTodos = await page.locator('.todo-item:not(.completed)').count();
  73 |     const newTotalTodos = await page.locator('.todo-item').count();
  74 |     expect(activeTodos).toBe(newTotalTodos);
  75 |   });
  76 | }); 
```