# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Patient Management >> should display patient list
- Location: /Users/zineone/Assesment/tests/patient-management.spec.js:19:3

# Error details

```
Error: page.fill: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('[data-testid="email-input"]')

    at /Users/zineone/Assesment/tests/patient-management.spec.js:8:18
```

# Page snapshot

```yaml
- text: GOR Pathology & Diagnostic Email
- textbox
- text: Password
- textbox
- button "Login"
- button "Recover or set password"
- text: OR
- button "gooogle Login in with Google":
  - img "gooogle"
  - text: Login in with Google
```

# Test source

```ts
   1 | const { test, expect } = require('@playwright/test');
   2 | const { allure } = require('allure-playwright');
   3 |
   4 | test.describe('Patient Management', () => {
   5 |   test.beforeEach(async ({ page }) => {
   6 |     await allure.step('Login to application', async () => {
   7 |       await page.goto('https://gor-pathology.web.app/');
>  8 |       await page.fill('[data-testid="email-input"]', 'test@kennect.io');
     |                  ^ Error: page.fill: Test timeout of 30000ms exceeded.
   9 |       await page.fill('[data-testid="password-input"]', 'Qwerty@1234');
  10 |       await page.click('[data-testid="login-button"]');
  11 |     });
  12 |
  13 |     await allure.step('Navigate to patient management', async () => {
  14 |       await page.click('[data-testid="patients-link"]');
  15 |       await page.waitForURL(/.*patients/);
  16 |     });
  17 |   });
  18 |
  19 |   test('should display patient list', async ({ page }) => {
  20 |     await allure.step('Verify patient list page elements', async () => {
  21 |       await expect(page.locator('[data-testid="patients-title"]')).toContainText('Patients');
  22 |       await expect(page.locator('[data-testid="add-patient-button"]')).toBeVisible();
  23 |       await expect(page.locator('[data-testid="patient-list"]')).toBeVisible();
  24 |       
  25 |       // Take screenshot of patient list
  26 |       const screenshot = await page.screenshot();
  27 |       await allure.attachment('Patient List', screenshot, 'image/png');
  28 |     });
  29 |   });
  30 |
  31 |   test('should add new patient', async ({ page }) => {
  32 |     const patientData = {
  33 |       name: 'John Doe',
  34 |       age: '30',
  35 |       phone: '1234567890',
  36 |       email: 'john.doe@example.com'
  37 |     };
  38 |
  39 |     await allure.step('Open add patient form', async () => {
  40 |       await page.click('[data-testid="add-patient-button"]');
  41 |       await expect(page.locator('[data-testid="patient-form"]')).toBeVisible();
  42 |     });
  43 |
  44 |     await allure.step('Fill patient details', async () => {
  45 |       await page.fill('[data-testid="patient-name-input"]', patientData.name);
  46 |       await page.fill('[data-testid="patient-age-input"]', patientData.age);
  47 |       await page.fill('[data-testid="patient-phone-input"]', patientData.phone);
  48 |       await page.fill('[data-testid="patient-email-input"]', patientData.email);
  49 |       
  50 |       await allure.attachment('Patient Data', JSON.stringify(patientData, null, 2), 'application/json');
  51 |     });
  52 |
  53 |     await allure.step('Submit patient form', async () => {
  54 |       await page.click('[data-testid="save-patient-button"]');
  55 |     });
  56 |
  57 |     await allure.step('Verify patient added', async () => {
  58 |       await expect(page.locator('[data-testid="patient-list"]')).toContainText(patientData.name);
  59 |       await expect(page.locator('[data-testid="patient-list"]')).toContainText(patientData.phone);
  60 |     });
  61 |   });
  62 |
  63 |   test('should create test request', async ({ page }) => {
  64 |     const testData = {
  65 |       patient: 'John Doe',
  66 |       test: 'Complete Blood Count (CBC)',
  67 |       notes: 'Routine checkup'
  68 |     };
  69 |
  70 |     await allure.step('Open create test form', async () => {
  71 |       await page.click('[data-testid="create-test-button"]');
  72 |       await expect(page.locator('[data-testid="test-request-form"]')).toBeVisible();
  73 |     });
  74 |
  75 |     await allure.step('Fill test request details', async () => {
  76 |       await page.selectOption('[data-testid="patient-select"]', { label: testData.patient });
  77 |       await page.selectOption('[data-testid="test-select"]', { label: testData.test });
  78 |       await page.fill('[data-testid="test-notes"]', testData.notes);
  79 |       
  80 |       await allure.attachment('Test Request Data', JSON.stringify(testData, null, 2), 'application/json');
  81 |     });
  82 |
  83 |     await allure.step('Submit test request', async () => {
  84 |       await page.click('[data-testid="submit-test-button"]');
  85 |     });
  86 |
  87 |     await allure.step('Verify test request created', async () => {
  88 |       await expect(page.locator('[data-testid="test-requests"]')).toContainText(testData.patient);
  89 |       await expect(page.locator('[data-testid="test-requests"]')).toContainText(testData.test);
  90 |     });
  91 |   });
  92 | }); 
```